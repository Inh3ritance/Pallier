{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","publicKey","n","g","privateKey","lambda","mu","m1","m2","c1","c2","c3","d","key_size","handleChangem1","bind","handleChangem2","generate_key","ev","this","setState","currentTarget","value","console","time","paillierBigint","catch","e","log","BigInt","encrypt","encryptedSum","addition","encryptedMul","multiply","decrypt","timeEnd","className","type","onClick","min","max","step","id","onChange","x","parseInt","target","toString","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.517734c5.chunk.js","sourcesContent":["import * as paillierBigint from 'paillier-bigint';\r\nimport React from 'react';\r\nimport './App.css';\r\n\r\nclass App extends React.Component {\r\n\r\n  constructor(){\r\n    super();\r\n    this.state = {\r\n        publicKey: { n: 0, g : 0 },\r\n        privateKey: {lambda: 0, mu: 0, publicKey: {}},\r\n        m1: 0,\r\n        m2: 0,\r\n        c1: 0,\r\n        c2: 0,\r\n        c3: 0,\r\n        d: 0,\r\n        key_size:400,\r\n    }\r\n    this.handleChangem1 = this.handleChangem1.bind(this);\r\n    this.handleChangem2 = this.handleChangem2.bind(this);\r\n    this.generate_key = this.generate_key.bind(this);\r\n  }\r\n\r\n  handleChangem1(ev){\r\n    this.setState({m1: ev.currentTarget.value});\r\n  }\r\n\r\n  handleChangem2(ev){\r\n    this.setState({m2: ev.currentTarget.value});\r\n  }\r\n\r\n  async generate_key(){\r\n\r\n    console.time();\r\n    const { publicKey, privateKey } = await paillierBigint.generateRandomKeys(3072,true).catch(e => {console.log(e)});\r\n    \r\n    this.setState({ publicKey: { n: publicKey.n, g:publicKey.g } });\r\n    this.setState({ privateKey: { lambda: privateKey.lambda, privateKey: privateKey.mu, publicKey: this.state.publicKey } });\r\n  \r\n    if(this.state.m1 > 0  && this.state.m2 > 0){\r\n      // Do not remove BigInt comments below!!! //\r\n      /* global BigInt */\r\n      const m1 = BigInt(this.state.m1);\r\n      const m2 = BigInt(this.state.m2);\r\n    \r\n      // encryption/decryption\r\n      const c1 = publicKey.encrypt(m1)\r\n      this.setState({c1: c1});\r\n      //console.log(privateKey.decrypt(c1)) // 12345678901234567890n\r\n    \r\n      // homomorphic addition of two ciphertexts (encrypted numbers)\r\n      const c2 = publicKey.encrypt(m2)\r\n      this.setState({c2: c2});\r\n\r\n      const encryptedSum = publicKey.addition(c1, c2)\r\n      //console.log(privateKey.decrypt(encryptedSum)) // m1 + m2 = 12345678901234567895n\r\n    \r\n      // multiplication by 2n\r\n      const encryptedMul = publicKey.multiply(encryptedSum, 2n);\r\n      this.setState({c3: encryptedMul});\r\n\r\n      // Decrypt c3\r\n      const d = privateKey.decrypt(encryptedMul);\r\n      this.setState({d: d});\r\n\r\n      console.timeEnd();\r\n    } else {\r\n      this.setState({c1: 0});\r\n      this.setState({c2: 0});\r\n      this.setState({c3: 0});\r\n      this.setState({d: 0});\r\n    }\r\n      console.timeEnd();\r\n  }\r\n\r\n  render(){\r\n    return (\r\n        <div className=\"App\">\r\n          <header className=\"App-header\">\r\n            <h1>Paillier Demo CS 4600</h1>\r\n            <p className='side'>Message 1:</p><input type=\"number\" onClick={this.handleChangem1} className='side'/>\r\n            <p className='side'>Message 2:</p><input type=\"number\" onClick={this.handleChangem2} className='side'/>\r\n            <div>\r\n              <p className='side push'>Key Size({this.state.key_size}):</p>\r\n              <input type=\"range\" min=\"1\" max=\"3720\" step=\"1\" value={this.state.key_size}\r\n                className=\"slider\" id=\"myRange\" onChange={(ev) => {\r\n                const x = parseInt(ev.target.value, 10);\r\n                this.setState({key_size: x});\r\n              }}/>\r\n            </div>\r\n            <div>\r\n              <h4 className='side push'>Generate Key:</h4>\r\n              <button onClick={this.generate_key} className='side'>press me</button>\r\n            </div>\r\n            <p>Public Key(n,g): </p>\r\n            <div>\r\n              <p className='side push'>n: </p>\r\n              <p className='side sol'>{this.state.publicKey.n.toString()}</p>\r\n            </div>\r\n            <div>\r\n              <p className='side push'>g: </p>\r\n              <p className='side sol'>{this.state.publicKey.g.toString()}</p>\r\n            </div>\r\n            <p>Private Key(lambda): </p>\r\n            <div>\r\n              <p className='side push'>lambda: </p>\r\n              <p className='side sol'>{this.state.privateKey.lambda.toString()}</p>\r\n            </div>\r\n            <p>Encrypted messages m1 and m2: </p>\r\n            <div>\r\n              <p className='side push'>c1: </p>\r\n              <p className='side sol'>{this.state.c1.toString()}</p>\r\n            </div>\r\n            <div>\r\n              <p className='side push'>c2: </p>\r\n              <p className='side sol'>{this.state.c2.toString()}</p>\r\n            </div>\r\n            <p>Encrypted messages 2*(c1 + c2): <i>*Note 2 is just an arbitrary Constant to show property of homomorphicism</i></p>\r\n            <div>\r\n              <p className='side push'>c3: </p>\r\n              <p className='side sol'>{this.state.c3.toString()}</p>\r\n            </div>\r\n            <p>Decrypt c3:</p>\r\n            <div>\r\n              <p className='side push'>d: </p>\r\n              <p className='side sol'>{this.state.d.toString()}</p>\r\n            </div>\r\n            <h6>**Special thanks to the contributor for this package at: https://www.npmjs.com/package/paillier-bigint</h6>\r\n          </header>\r\n        </div>\r\n      );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}