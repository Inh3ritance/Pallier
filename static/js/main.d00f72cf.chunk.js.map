{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","generate_key","a","console","time","paillierBigint","state","key_size","publicKey","privateKey","setState","n","g","lambda","mu","m1","m2","BigInt","c1","encrypt","c2","encryptedSum","addition","encryptedMul","multiply","c3","d","decrypt","timeEnd","handleChangem1","bind","handleChangem2","ev","this","currentTarget","value","log","className","type","onClick","min","max","step","class","id","onChange","e","x","parseInt","target","toString","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wSAwIeA,G,wDAlIb,aAAc,IAAD,8BACX,gBAwBFC,aAzBa,sBAyBE,8CAAAC,EAAA,6DAEbC,QAAQC,OAFK,SAI2BC,IAAkC,EAAKC,MAAMC,UAJxE,gBAILC,EAJK,EAILA,UAAWC,EAJN,EAIMA,WAEnB,EAAKC,SAAS,CAAEF,UAAW,CAAEG,EAAGH,EAAUG,EAAGC,EAAEJ,EAAUI,KACzD,EAAKF,SAAS,CAAED,WAAY,CAAEI,OAAQJ,EAAWI,OAAQJ,WAAYA,EAAWK,GAAIN,UAAW,EAAKF,MAAME,aAEvG,EAAKF,MAAMS,GAAK,GAAM,EAAKT,MAAMU,GAAK,GAGjCD,EAAKE,OAAO,EAAKX,MAAMS,IACvBC,EAAKC,OAAO,EAAKX,MAAMU,IAGvBE,EAAKV,EAAUW,QAAQJ,GAC7B,EAAKL,SAAS,CAACQ,GAAIA,IAIbE,EAAKZ,EAAUW,QAAQH,GAC7B,EAAKN,SAAS,CAACU,GAAGA,IAEZC,EAAeb,EAAUc,SAASJ,EAAIE,GAItCG,EAAef,EAAUgB,SAASH,EAAc,IACtD,EAAKX,SAAS,CAACe,GAAIF,IAGbG,EAAIjB,EAAWkB,QAAQJ,GAC7B,EAAKb,SAAS,CAACgB,EAAEA,IAEjBvB,QAAQyB,YAER,EAAKlB,SAAS,CAACQ,GAAI,IACnB,EAAKR,SAAS,CAACU,GAAI,IACnB,EAAKV,SAAS,CAACe,GAAI,IACnB,EAAKf,SAAS,CAACgB,EAAG,KAElBvB,QAAQyB,UA1CG,4CAvBb,EAAKtB,MAAQ,CACTE,UAAW,CAAEG,EAAG,EAAGC,EAAI,GACvBH,WAAY,CAACI,OAAQ,EAAGC,GAAI,EAAGN,UAAW,IAC1CO,GAAI,EACJC,GAAI,EACJE,GAAI,EACJE,GAAI,EACJK,GAAI,EACJC,EAAG,EACHnB,SAAS,KAEb,EAAKsB,eAAiB,EAAKA,eAAeC,KAApB,gBACtB,EAAKC,eAAiB,EAAKA,eAAeD,KAApB,gBAdX,E,2DAiBEE,GACbC,KAAKvB,SAAS,CAACK,GAAIiB,EAAGE,cAAcC,U,qCAGvBH,GACbC,KAAKvB,SAAS,CAACM,GAAIgB,EAAGE,cAAcC,U,+BAgD7B,IAAD,OAEN,OADAhC,QAAQiC,IAAIH,KAAK3B,MAAMC,UAEnB,yBAAK8B,UAAU,OACb,4BAAQA,UAAU,cAChB,qDACA,uBAAGA,UAAU,QAAb,cAAkC,2BAAOC,KAAK,SAASC,QAASN,KAAKJ,eAAgBQ,UAAU,SAC/F,uBAAGA,UAAU,QAAb,cAAkC,2BAAOC,KAAK,SAASC,QAASN,KAAKF,eAAgBM,UAAU,SAC/F,6BACE,uBAAGA,UAAU,aAAb,YAAmCJ,KAAK3B,MAAMC,SAA9C,MACA,2BAAO+B,KAAK,QAAQE,IAAI,IAAIC,IAAI,OAAOC,KAAK,IAAIP,MAAOF,KAAK3B,MAAMC,SACjEoC,MAAM,SAASC,GAAG,UAAUC,SAAU,SAAAC,GACrC,IAAMC,EAAIC,SAASF,EAAEG,OAAOd,MAAO,IACnC,EAAKzB,SAAS,CAACH,SAAUwC,QAG7B,6BACE,wBAAIV,UAAU,aAAd,iBACA,4BAAQE,QAASN,KAAKhC,aAAcoC,UAAU,QAA9C,aAEF,gDACA,6BACE,uBAAGA,UAAU,aAAb,OACA,uBAAGA,UAAU,YAAYJ,KAAK3B,MAAME,UAAUG,EAAEuC,aAElD,6BACE,uBAAGb,UAAU,aAAb,OACA,uBAAGA,UAAU,YAAYJ,KAAK3B,MAAME,UAAUI,EAAEsC,aAElD,oDACA,6BACE,uBAAGb,UAAU,aAAb,YACA,uBAAGA,UAAU,YAAYJ,KAAK3B,MAAMG,WAAWI,OAAOqC,aAExD,6DACA,6BACE,uBAAGb,UAAU,aAAb,QACA,uBAAGA,UAAU,YAAYJ,KAAK3B,MAAMY,GAAGgC,aAEzC,6BACE,uBAAGb,UAAU,aAAb,QACA,uBAAGA,UAAU,YAAYJ,KAAK3B,MAAMc,GAAG8B,aAEzC,8DAAmC,wGACnC,6BACE,uBAAGb,UAAU,aAAb,QACA,uBAAGA,UAAU,YAAYJ,KAAK3B,MAAMmB,GAAGyB,aAEzC,0CACA,6BACE,uBAAGb,UAAU,aAAb,OACA,uBAAGA,UAAU,YAAYJ,KAAK3B,MAAMoB,EAAEwB,aAExC,4I,GA7HMC,IAAMC,YCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnE,QAAQmE,MAAMA,EAAMC,c","file":"static/js/main.d00f72cf.chunk.js","sourcesContent":["import * as paillierBigint from 'paillier-bigint';\nimport React from 'react';\nimport './App.css';\n\nclass App extends React.Component {\n\n  constructor(){\n    super();\n    this.state = {\n        publicKey: { n: 0, g : 0 },\n        privateKey: {lambda: 0, mu: 0, publicKey: {}},\n        m1: 0,\n        m2: 0,\n        c1: 0,\n        c2: 0,\n        c3: 0,\n        d: 0,\n        key_size:400,\n    }\n    this.handleChangem1 = this.handleChangem1.bind(this);\n    this.handleChangem2 = this.handleChangem2.bind(this);\n  }\n\n  handleChangem1(ev){\n    this.setState({m1: ev.currentTarget.value});\n  }\n\n  handleChangem2(ev){\n    this.setState({m2: ev.currentTarget.value});\n  }\n\n  generate_key = async()=> {\n\n    console.time();\n\n    const { publicKey, privateKey } = await paillierBigint.generateRandomKeys(this.state.key_size);\n    \n    this.setState({ publicKey: { n: publicKey.n, g:publicKey.g } });\n    this.setState({ privateKey: { lambda: privateKey.lambda, privateKey: privateKey.mu, publicKey: this.state.publicKey } });\n  \n    if(this.state.m1 > 0  && this.state.m2 > 0){\n      // Do not remove BigInt comments below!!! //\n      /* global BigInt */\n      const m1 = BigInt(this.state.m1);\n      const m2 = BigInt(this.state.m2);\n    \n      // encryption/decryption\n      const c1 = publicKey.encrypt(m1)\n      this.setState({c1: c1});\n      //console.log(privateKey.decrypt(c1)) // 12345678901234567890n\n    \n      // homomorphic addition of two ciphertexts (encrypted numbers)\n      const c2 = publicKey.encrypt(m2)\n      this.setState({c2:c2});\n\n      const encryptedSum = publicKey.addition(c1, c2)\n      //console.log(privateKey.decrypt(encryptedSum)) // m1 + m2 = 12345678901234567895n\n    \n      // multiplication by 2n\n      const encryptedMul = publicKey.multiply(encryptedSum, 2n);\n      this.setState({c3: encryptedMul});\n\n      // Decrypt c3\n      const d = privateKey.decrypt(encryptedMul);\n      this.setState({d:d});\n\n      console.timeEnd();\n    } else {\n      this.setState({c1: 0});\n      this.setState({c2: 0});\n      this.setState({c3: 0});\n      this.setState({d: 0});\n    }\n      console.timeEnd();\n  }\n\n  render(){\n    console.log(this.state.key_size);\n    return (\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <h1>Paillier Demo CS 3180</h1>\n            <p className='side'>Message 1:</p><input type=\"number\" onClick={this.handleChangem1} className='side'/>\n            <p className='side'>Message 2:</p><input type=\"number\" onClick={this.handleChangem2} className='side'/>\n            <div>\n              <p className='side push'>Key Size({this.state.key_size}):</p>\n              <input type=\"range\" min=\"1\" max=\"3720\" step=\"1\" value={this.state.key_size}\n               class=\"slider\" id=\"myRange\" onChange={e => {\n                const x = parseInt(e.target.value, 10);\n                this.setState({key_size: x});\n              }}/>\n            </div>\n            <div>\n              <h4 className='side push'>Generate Key:</h4>\n              <button onClick={this.generate_key} className='side'>press me</button>\n            </div>\n            <p>Public Key(n,g): </p>\n            <div>\n              <p className='side push'>n: </p>\n              <p className='side sol'>{this.state.publicKey.n.toString()}</p>\n            </div>\n            <div>\n              <p className='side push'>g: </p>\n              <p className='side sol'>{this.state.publicKey.g.toString()}</p>\n            </div>\n            <p>Private Key(lambda): </p>\n            <div>\n              <p className='side push'>lambda: </p>\n              <p className='side sol'>{this.state.privateKey.lambda.toString()}</p>\n            </div>\n            <p>Encrypted messages m1 and m2: </p>\n            <div>\n              <p className='side push'>c1: </p>\n              <p className='side sol'>{this.state.c1.toString()}</p>\n            </div>\n            <div>\n              <p className='side push'>c2: </p>\n              <p className='side sol'>{this.state.c2.toString()}</p>\n            </div>\n            <p>Encrypted messages 2*(c1 + c2): <i>*Note 2 is just an arbitrary Constant to show property of homomorphicism</i></p>\n            <div>\n              <p className='side push'>c3: </p>\n              <p className='side sol'>{this.state.c3.toString()}</p>\n            </div>\n            <p>Decrypt c3:</p>\n            <div>\n              <p className='side push'>d: </p>\n              <p className='side sol'>{this.state.d.toString()}</p>\n            </div>\n            <h6>**Special thanks to the contributor for this package at: https://www.npmjs.com/package/paillier-bigint</h6>\n          </header>\n        </div>\n      );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}